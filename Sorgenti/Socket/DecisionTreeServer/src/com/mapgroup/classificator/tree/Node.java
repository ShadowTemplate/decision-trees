package com.mapgroup.classificator.tree;

import com.mapgroup.classificator.data.Data;

import java.io.Serializable;
import java.util.HashMap;

/**
 * This class represents a generic node in a decision tree
 */

public abstract class Node implements Serializable {

    /**
     * Counter of the node generated by the tree
     */
    //private static int idNodeCount = 0;

    /**
     * Numeric identification of the node
     */
    //private int idNode;

    /**
     * Index of the decision tree's array which represents the first example of the current node
     */
    private final int beginExampleIndex;
    /**
     * Index of the decision tree's array which represents the last example of the current node
     */
    private final int endExampleIndex;
    /**
     * This controls the absolute frequency values for each class value.
     */
    protected final HashMap<String, Integer> classValueAbsoluteFrequency;
    /**
     * Value of the calculate entropy, respect to the current node, in the training subset of the node
     */
    protected float entropy;

    /**
     * Supports the primitive attributes of class,
     * instantiates and populates the modeled structure classValueAbsoluteFrequency object and
     * uses this to calculate the entropy with respect to the attribute class
     * in the subset of training covered by the node
     *
     * @param trainingSet       current training set
     * @param beginExampleIndex index that represents the first extreme of the training subset
     * @param endExampleIndex   index that represents the last extreme of the training subset
     */

    Node(Data trainingSet, int beginExampleIndex, int endExampleIndex) {

        //idNode = idNodeCount++;
        classValueAbsoluteFrequency = new HashMap<String, Integer>();

        this.beginExampleIndex = beginExampleIndex;
        this.endExampleIndex = endExampleIndex;

        for (int i = 0; i < trainingSet.getClassAttribute().getNumOfDistinctValues(); i++) {
            classValueAbsoluteFrequency.put(trainingSet.getClassAttribute().getValue(i), 0);
        }

        for (int i = beginExampleIndex; i <= endExampleIndex; i++) {
            String classValue = trainingSet.getClassValue(i);
            classValueAbsoluteFrequency.put(classValue, classValueAbsoluteFrequency.get(classValue) + 1);
        }

        entropy = 0;

        int numberOfExamples = endExampleIndex - beginExampleIndex + 1;
        for (Integer v : classValueAbsoluteFrequency.values()) {

            if (v != 0) {
                float p = ((float) v) / numberOfExamples;
                entropy += (-p * Math.log10(p) / Math.log10(2));
            }
        }
    }

    /**
     * Returns <code>idNode</code>
     *
     * @return return an int which represents the id node
     */

    /*
    protected int getIdNode() {
        return idNode;
    }
    */

    /**
     * Return the first example in the training subset
     *
     * @return <code>beginExampleIndex</code>
     */

    int getBeginExampleIndex() {
        return beginExampleIndex;
    }

    /**
     * Return the last example in the training subset
     *
     * @return <code>endExampleIndex</code>
     */

    int getEndExampleIndex() {
        return endExampleIndex;
    }

    /**
     * Returns the entropy value
     *
     * @return <code>entropy</code>
     */

    public float getEntropy() {
        return entropy;
    }

    /**
     * Returns number of children's node
     *
     * @return number of children's node
     */

    public abstract int getNumberOfChildren();

    /**
     * Concatenates in a <code>String</code> the values of <code>beginExampleIndex</code>, <code>endExampleIndex</code>,
     * <code>entropy</code>
     *
     * @return the string containing information on the node
     */

    public String toString() {
        return "Node: [Example:" + getBeginExampleIndex() + "-" + getEndExampleIndex() + "] entropy:" + getEntropy() + " ";
    }
}